Logbuch-BuildLibs

1. Use sample of hello-libs.
Hello-libs sample shows how to generate libs in a gen-libs subproject using gradle and cmake.
Those libs are copied to a distribution folder and linked to the ndk app.

2. Try to build encrypto-utils for android. 
2.1 Enable gen-lib project.
2.2 set cmake version to system version (3.17.3)
    Also set abiFilters in build.gradle defaultConfig ndk abiFilters to "arm64-v8a"
2.3 Build GMP for Android
    hg clone https://gmplib.org/repo/gmp/ gmplib
    Following https://github.com/CGAL/cgal/wiki/Cross-Compilation-of-CGAL-for-Android
    export ANDROID_NDK="/home/marcel/Android/Sdk/ndk/21.2.6472646"
    export TOOLCHAIN_PATH=${ANDROID_NDK}/toolchains/llvm/prebuilt/linux-x86_64
    export CC=${TOOLCHAIN_PATH}/bin/aarch64-linux-android28-clang 
    export CXX=${TOOLCHAIN_PATH}/bin/aarch64-linux-android28-clang++
    export PATH="${TOOLCHAIN_PATH}:${PATH}"
    ./configure --prefix=/home/marcel/repos/gmplib/build --enable-shared --host=aarch64-linux-android --enable-cxx
    (needed: autoreconf -i  to fix configure not found error.)
2.4 Edit findgmp(xx) cmake files
    set GMP_INCLUDE_DIR, GMP_LIBRARY to the build/include build/lib dirs from 2.3 (same for GMPXX)
2.5 Build OPENSSL for Android.
    Also by hand. Future: use cmake module to do this.
    ! checkout the right tag! not 3.0.0 alpha that is the Head on master.
    Use: OpenSSL_1_1_1g
    Guide followed:
    https://proandroiddev.com/tutorial-compile-openssl-to-1-1-1-for-android-application-87137968fee
    export ANDROID_NDK_HOME=${ANDROID_NDK}
    export OPENSSL_DIR=/home/repos/openssl
    # toolchain path var from 2.3 but /bin!
    export CC=clang
    export ANDROID_API=28
    export architecture=android-arm64
    ./Configure ${architecture} -D__ANDROID_API__=$ANDROID_API
    make -j 4
    mkdir -p output/include
    mkdir -p output/lib/${architecture}
    cp -RL include/openssl output/include
    cp libcrypto.so libcrypto.a libssl.so libssl.a output/lib/android-arm64
    set OPENSSL_ROOT_DIR/INCLUDE_DIR/CRYPTO_LIBRARY to output/...
2.6 Build Boost for android
    Followed https://github.com/dec1/Boost-for-Android which is a fork of https://github.com/moritz-wundke/Boost-for-Android
    set(BOOST_ROOT "/home/marcel/repos/Boost-for-Android/build/install")
    set(Boost_INCLUDE_DIR "${BOOST_ROOT}/include")
    set(Boost_LIBRARY_DIR "${BOOST_ROOT}/libs/${CMAKE_ANDROID_ARCH_ABI}")
    set(BOOST_NO_SYSTEM_PATHS ON)
2.7 Configure/build relic.
    compare to oliver-schick encrypto android branch.
    align relic settings to https://github.com/oliver-schick/ENCRYPTO_utils/blob/master/cmake/Modules/AddRelic.cmake
2.8 build ENCRYPTO_utils
    Gradle and the current setup doesn't do what i want. it seemingly just configures and doesnt make/build the lib.
    I copied the whole encrypto project with the changed cmake files out of the android studio.
    cmake-gui: set Openssl and Boost root dirs (works, unlike in android studio), set android vars, use android toolchain, set install prefix.
    configure, generate
    make
    make install.

3. Run jni sample program.

2.x: the great cmake debacle.
    Problems:   findboost/openssl are not finding cross-compiled libraries without explicitly setting all internal vars.
                Also openssl is not packaged correctly with the library, android needs the library as part of the ndk build.

        It could be related to the toolchain file of android. https://stackoverflow.com/questions/18715694/cmake-doesnt-find-boost-libraries-while-using-android-cmake-toolchain-file
    Learn: https://pabloariasal.github.io/2018/02/19/its-time-to-do-cmake-right/
            https://www.youtube.com/watch?v=rLopVhns4Zs&feature=youtu.be